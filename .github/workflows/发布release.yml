name: 发布release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.32.1)'
        required: true
        default: 'v1.32.1'
      create_release:
        description: 'Create GitHub Release'
        required: true
        type: boolean
        default: true
      overwrite_release:
        description: 'Overwrite existing release if it exists'
        required: true
        type: boolean
        default: false
      generate_changelog:
        description: 'Generate changelog'
        required: true
        type: boolean
        default: true
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    name: Create Release
    outputs:
      release_tag: ${{ steps.set-tag.outputs.tag }}
      release_exists: ${{ steps.check-release.outputs.exists }}
      is_tag_release: ${{ steps.set-tag.outputs.is_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set release tag
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ inputs.release_tag }}" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          fi
          echo "Release tag: ${{ steps.set-tag.outputs.tag }}"

      - name: Check if release exists
        id: check-release
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set-tag.outputs.tag }}" || echo "{}")
          if echo "$RESPONSE" | grep -q '"message":"Not Found"'; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.set-tag.outputs.tag }} already exists"
          fi

      - name: Delete existing release
        if: steps.check-release.outputs.exists == 'true' && (github.event_name == 'workflow_dispatch' && inputs.overwrite_release)
        run: |
          echo "Deleting existing release ${{ steps.set-tag.outputs.tag }}..."
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set-tag.outputs.tag }}" || echo "Failed to delete release, continuing..."
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.set-tag.outputs.tag }}" || echo "Failed to delete tag, continuing..."
          sleep 3

      - name: Create Release
        if: steps.check-release.outputs.exists == 'false' || (github.event_name == 'workflow_dispatch' && inputs.overwrite_release)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set-tag.outputs.tag }}
          name: Release ${{ steps.set-tag.outputs.tag }}
          body: |
            静态导出版本 ${{ steps.set-tag.outputs.tag }}
            
            ### 包含内容
            - 构建好的静态文件
            - 可直接部署的 dist 目录压缩包
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Skip Release Creation
        if: steps.check-release.outputs.exists == 'true' && (github.event_name != 'workflow_dispatch' || !inputs.overwrite_release)
        run: |
          echo "Release ${{ steps.set-tag.outputs.tag }} already exists and overwrite is disabled. Skipping release creation."

  build-static:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "latest"

      - name: Install dependencies
        run: bun install

      - name: Build static export
        run: |
          bun run build

      - name: Verify build output
        run: |
          echo "Build output contents:"
          ls -la dist/
          echo "Total files in dist: $(find dist -type f | wc -l)"

      - name: Compress dist folder
        run: zip -r dist.zip dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-export
          path: dist.zip

  generate-changelog:
    needs: [create-release, build-static]
    runs-on: ubuntu-latest
    if: (needs.create-release.outputs.is_tag_release == 'true' || (github.event_name == 'workflow_dispatch' && inputs.generate_changelog)) && (needs.create-release.outputs.release_exists == 'false' || (github.event_name == 'workflow_dispatch' && inputs.overwrite_release))
    name: Generate Changelog
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "latest"

      - name: Generate changelog with fallback
        id: changelog
        run: |
          # 尝试生成 changelog，如果失败则使用默认内容
          if bun x changelogithub; then
            echo "Changelog generated successfully"
            echo "changelog_success=true" >> $GITHUB_OUTPUT
          else
            echo "Changelog generation failed, using default content"
            echo "changelog_success=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Create manual changelog on failure
        if: steps.changelog.outputs.changelog_success == 'false'
        run: |
          echo "Creating manual changelog..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # 如果没有之前的 tag，显示最近的提交
            echo "## Changes since initial commit" > manual_changelog.md
            git log --oneline -10 >> manual_changelog.md
          else
            # 显示与前一个 tag 的差异
            echo "## Changes since $LAST_TAG" > manual_changelog.md
            git log --oneline ${LAST_TAG}..HEAD >> manual_changelog.md
          fi
          
          echo "Manual changelog content:"
          cat manual_changelog.md

  release:
    needs: [create-release, build-static, generate-changelog]
    runs-on: ubuntu-latest
    if: needs.create-release.outputs.release_exists == 'false' || (github.event_name == 'workflow_dispatch' && inputs.overwrite_release)
    name: Release Static Export
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: static-export
          path: ./

      - name: Verify artifact
        run: |
          echo "Downloaded artifacts:"
          ls -la
          echo "dist.zip size: $(du -h dist.zip | cut -f1)"

      - name: Release static export
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.release_tag }}
          files: dist.zip
          body: |
            静态导出版本 ${{ needs.create-release.outputs.release_tag }}
            
            ### 使用说明
            1. 下载 `dist.zip` 文件
            2. 解压后即可获得构建好的静态文件
            3. 可将 `dist` 目录部署到任何静态文件服务器
            
            ### 文件结构
            ```
            dist/
            ├── index.html
            ├── assets/
            │   ├── js/
            │   ├── css/
            │   └── images/
            └── ...其他静态文件
            ```
